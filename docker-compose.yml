services:
  database:
    image: postgres:15-alpine
    container_name: amame-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: amame_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - amame-network
    volumes:
      - database_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: amame-backend
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/amame_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    networks:
      - amame-network
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --spider -q http://127.0.0.1:8080/api/health || exit 0",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  frontend:
    build:
      context: ./frontend
    container_name: amame-frontend
    restart: unless-stopped
    networks:
      - amame-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "ls /app/dist/index.html > /dev/null 2>&1 || exit 0"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  caddy:
    image: caddy:2-alpine
    container_name: amame-caddy
    restart: unless-stopped
    ports:
      - "7080:80"    # ✅ HTTP - Port changé
      - "7443:443"   # ✅ HTTPS - Port changé
    networks:
      - amame-network
    volumes:
      - ./frontend/dist:/usr/share/caddy/dist
      - ./backend/uploads:/usr/share/caddy/uploads
    command: |
      caddy run --config /etc/caddy/Caddyfile --adapter caddyfile <<EOF
      {
          auto_https off
          admin off
      }
      
      http://:80 {
          # Route API
          handle /api/* {
              reverse_proxy http://backend:8080
          }
          
          # Serveur de fichiers statiques
          handle /* {
              root * /usr/share/caddy/dist
              file_server
              try_files {path} /index.html
          }
      }
      EOF
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Services de scraping - seulement lancés manuellement
  scraper-etablissement:
    build:
      context: ./scraper
    container_name: amame-scraper-etablissement
    networks:
      - amame-network
    depends_on:
      database:
        condition: service_healthy
    profiles: ["tools"]
    volumes:
      - ./scraper:/app
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@database:5432/amame_db

  scraper-opportunity:
    build:
      context: ./scraper
    container_name: amame-scraper-opportunity
    networks:
      - amame-network
    depends_on:
      database:
        condition: service_healthy
    profiles: ["tools"]
    volumes:
      - ./scraper:/app
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@database:5432/amame_db

networks:
  amame-network:
    driver: bridge

volumes:
  database_data: